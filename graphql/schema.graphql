### This file was generated by Nexus Schema
### Do not make changes to this file directly


enum AccountType {
  CUSTOMERS
  RETAILERS
}

type Auth {
  applied: Boolean
  email: String
  id: String
  mode: AuthType
  oobCode: String
}

enum AuthType {
  passwordReset
  verifyEmail
}

enum BusinesType {
  DISPENSARY
  PACKAGING
  SMOKESHOP
  VAPESHOP
}

enum BusinessSellerType {
  DISTRIBUTER
  JOBBER
  SHOPOWNER
}

enum FooterType {
  ABOUT
  CUSTOMERCARE
  OURINFORMATION
}

enum ImageType {
  FIFTH
  FOURTH
  MAIN
  SECONDARY
  THIRD
}

type Mutation {
  createAuth(email: String!, mode: AuthType!, oobCode: String!): Auth
  createBusinesProfile(address: String!, businesType: BusinesType!, city: String!, country: String!, doc: String!, email: String!, name: String!, phone: String!, sellerType: BusinessSellerType!, state: String!): business
  createNewsLetter(email: String!): NewsLetter
  createOrder(address_id: String!, subtotal: Float!, total_price: Float!, traction_id: String!): orders
  createProductOrder(order_id: String!, productId: String!, purchasedPrice: Float!, quantity: Int, variant_id: [String]): productOrder
  createReview(product_id: String!, rating: Int!, review: String!, user_id: String!): Review
  createUser(business_id: String, email: String!, name: String!, number: String, type: AccountType): users
  createdAddress(address: String!, city: String, firstName: String!, label: String!, lastName: String!, number: String, postcode: String, user_id: String!): addresses
  toggleUserVerify(email: String!): users
  updateAddress(address: String, addressId: String!, city: String, firstName: String, label: String, lastName: String, number: String, postcode: String, user_id: String): addresses
}

type NewsLetter {
  createdAt: String
  email: String
  id: String
}

enum OrderStatusEnum {
  CANCELLED
  COMPLETED
  PROCESSING
  SHIPPED
}

type Query {
  addresses: [addresses]
  brandByCat(slug: String!): [brands]
  brandProduct(slug: String!): [products]
  brandProductLoadMore(id: String!, slug: String!): [products]
  brands: [brands]
  buisnesses: [business]
  categories: [categories]
  categoriesHeader: [categories]
  category(slug: String!): categories
  categoryFiltersType(slug: String!): [filtersType]
  categoryProducts(slug: String!): categories
  featuredProducts: [products]
  filterById(category_slug: String, id: [String!]!, inner_category_slug: String, sub_category_slug: String): [filters]
  filtersType(id: String!): filtersType
  fitlers: [filters]
  flashSale: [products]
  footerContent(type: FooterType!): [footer]
  footerData: [footer]
  images: [SliderImages]
  individualContent(slug: String!): footer
  isUserExist(email: String!): users
  newArrival: [products]
  orders: [orders]
  product(slug: String!): products
  productOrders: [productOrder]
  productPopup(slug: String!): products
  productreviews(productId: String!): [Review]
  products: [products]
  reviews: [Review]
  saleProducts: [products]
  searchProducts(name: String!): [products]
  singleOrder(id: String!): orders
  singleVariant: [variant]
  sliderImages(type: ImageType!): SliderImages
  userAddress(email: String!): addresses
  users: [users]
  validCredentials(oobCode: String!): String
  variants: [variants]
}

type Review {
  createdAt: String
  id: String
  product_id: String
  rating: Int
  review: String
  updatedAt: String
  user: users
  user_id: String
}

type SliderImages {
  id: String
  images: [String]
  type: ImageType
}

type addresses {
  address: String
  city: String
  firstName: String
  id: String
  label: String
  lastName: String
  number: String
  orders: [orders]
  postcode: String
  user_id: String
}

type brands {
  category: categories
  category_id: String
  id: String
  imageURI: String
  name: String
  products: [products]
  slug: String
}

type business {
  address: String
  businessType: BusinesType
  city: String
  country: String
  doc: String
  email: String
  id: String
  name: String
  phone: String
  sellerType: BusinessSellerType
  state: String
}

type categories {
  InnerProducts(take: Int): [products]
  LoadMoreInnerProducts(lastPSlug: String!, take: Int): [products]
  LoadMoreMainProducts(lastPSlug: String!, take: Int): [products]
  LoadMoreSubProducts(lastPSlug: String!, take: Int): [products]
  MainProducts(take: Int): [products]
  SubProducts(take: Int): [products]
  active: Boolean
  brands: [brands]
  child(active: Boolean): [categories]
  id: String
  imageURI: String
  name: String
  parent: categories
  parentId: String
  slug: String
  type: categoriesTypes
}

enum categoriesTypes {
  INNER
  MAIN
  SUB
}

type filters {
  filterTypeId: String
  filtersTypes: filtersType
  id: String
  name: String
  products: [products]
  slug: String
}

type filtersType {
  category: categories
  category_id: String
  filters: [filters]
  id: String
  name: String
  slug: String
}

type footer {
  content: String
  createdAt: String
  id: String
  imageURI: String
  slug: String
  title: String
  type: FooterType
}

type orders {
  Address: addresses
  address_id: String
  createdAt: String
  id: String
  orderProducts: [productOrder]
  order_id: Int
  order_status: OrderStatusEnum
  subtotal: Float
  total_price: Float
  traction_id: String
}

type productOrder {
  id: String
  order_id: String
  product: products
  productId: String
  purchasedPrice: Float
  quantity: Int
  variants: [variant]
}

type products {
  additional_info: String
  brand_id: String
  brands: brands
  code: String
  discount_price: Float
  featured: Boolean
  galleryImage: [String]
  hot_deals: Boolean
  id: String
  imageURI: String
  inner_category: categories
  inner_category_id: String
  long_description: String
  main_category: categories
  main_category_id: String
  name: String
  new_arrival: Boolean
  purchase_price: Float
  quantity: Int
  selling_price: Float
  short_description: String
  sku: String
  slug: String
  special_deals: Boolean
  special_offer: Boolean
  status: Boolean
  sub_category: categories
  sub_category_id: String
  tags: [String]
  tier1_price: Float
  tier2_price: Float
  tier3_price: Float
  tier4_price: Float
  variants: [variants]
}

type users {
  addresses: [addresses]
  business_id: String
  email: String
  id: String
  imageURI: String
  name: String
  number: String
  status: Boolean
  tier: Int
  type: AccountType
  verify: Boolean
}

type variant {
  id: String
  imageURI: String
  name: String
  price: Float
  quantity: Int
  sku: String
  variantType: variants
  variantTypeId: String
}

type variants {
  id: String
  name: String
  product: products
  product_id: String
  required: Boolean
  type: variantsEnum
  variants: [variant]
}

enum variantsEnum {
  BATTERIES
  CHARGERS
  COLORS
  CUSTOMS
  LIQUIDS
  SIZES
}